#!/usr/bin/env node

const sharp = require('sharp');
const fs = require('fs').promises;
const path = require('path');

// Konfigurace
const INPUT_DIR = '../public/Fotky_logo';
const OUTPUT_DIR = '../public/optimized';
const SIZES = [400, 800, 1200, 1920];
const WEBP_QUALITY = 85;
const JPEG_QUALITY = 90;

async function ensureDir(dir) {
  try {
    await fs.access(dir);
  } catch {
    await fs.mkdir(dir, { recursive: true });
    console.log(`‚úÖ Vytvo≈ôena slo≈æka: ${dir}`);
  }
}

async function optimizeImage(inputPath, filename) {
  const nameWithoutExt = path.parse(filename).name;
  const inputBuffer = await fs.readFile(inputPath);
  
  console.log(`üîÑ Optimalizuji: ${filename}`);
  
  try {
    // Z√≠skej origin√°ln√≠ rozmƒõry
    const metadata = await sharp(inputBuffer).metadata();
    const originalWidth = metadata.width;
    
    // Optimalizuj pro ka≈ædou velikost
    for (const size of SIZES) {
      // P≈ôeskoƒç velikosti vƒõt≈°√≠ ne≈æ origin√°l
      if (size > originalWidth) continue;
      
      // WebP verze
      const webpPath = path.join(OUTPUT_DIR, `${nameWithoutExt}_${size}.webp`);
      await sharp(inputBuffer)
        .resize(size, null, { 
          withoutEnlargement: true,
          fastShrinkOnLoad: false 
        })
        .webp({ quality: WEBP_QUALITY, effort: 6 })
        .toFile(webpPath);
      
      // JPEG verze (zmen≈°en√°)
      const jpegPath = path.join(OUTPUT_DIR, `${nameWithoutExt}_${size}.jpg`);
      await sharp(inputBuffer)
        .resize(size, null, { 
          withoutEnlargement: true,
          fastShrinkOnLoad: false 
        })
        .jpeg({ quality: JPEG_QUALITY, progressive: true })
        .toFile(jpegPath);
    }
    
    // Origin√°ln√≠ WebP verze
    const originalWebpPath = path.join(OUTPUT_DIR, `${nameWithoutExt}_original.webp`);
    await sharp(inputBuffer)
      .webp({ quality: WEBP_QUALITY, effort: 6 })
      .toFile(originalWebpPath);
    
    console.log(`‚úÖ Hotovo: ${filename}`);
    
  } catch (error) {
    console.error(`‚ùå Chyba p≈ôi optimalizaci ${filename}:`, error.message);
  }
}

async function main() {
  console.log('üöÄ Spou≈°t√≠m optimalizaci obr√°zk≈Ø...');
  
  try {
    // Zajisti existenci v√Ωstupn√≠ slo≈æky
    await ensureDir(OUTPUT_DIR);
    
    // Z√≠skej seznam obr√°zk≈Ø
    const files = await fs.readdir(INPUT_DIR);
    const imageFiles = files.filter(file => 
      /\.(jpg|jpeg|png)$/i.test(file)
    );
    
    console.log(`üì∑ Nalezeno ${imageFiles.length} obr√°zk≈Ø`);
    
    // Optimalizuj v≈°echny obr√°zky
    for (const file of imageFiles) {
      const inputPath = path.join(INPUT_DIR, file);
      await optimizeImage(inputPath, file);
    }
    
    console.log('üéâ Optimalizace dokonƒçena!');
    
    // Zobraz statistiky
    const optimizedFiles = await fs.readdir(OUTPUT_DIR);
    console.log(`üìä Vytvo≈ôeno ${optimizedFiles.length} optimalizovan√Ωch soubor≈Ø`);
    
  } catch (error) {
    console.error('‚ùå Chyba p≈ôi optimalizaci:', error);
    process.exit(1);
  }
}

// Spus≈• pouze pokud je skript vol√°n p≈ô√≠mo
if (require.main === module) {
  main();
}

module.exports = { optimizeImage, SIZES, WEBP_QUALITY, JPEG_QUALITY };